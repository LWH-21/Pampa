<SYNTAX>
	<SQLITE>
		<LWH_BKDIR>
			<TABLE>
CREATE TABLE LWH_BKDIR(	
	ID INT NOT NULL,
	PARENTBM INT NULL,
	CAPTION TEXT NULL,
	LASTUSER TEXT NULL DEFAULT '',
	ROWVERSION DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
	CONSTRAINT PK_LWH_BKDIR PRIMARY KEY (ID),
	CONSTRAINT FK_BKDIR FOREIGN KEY (PARENTBM) REFERENCES LWH_BKDIR(ID) ON DELETE CASCADE);
			</TABLE>
			<INIT>
REPLACE INTO LWH_BKDIR(ID,PARENTBM,CAPTION) VALUES(0,null,'/');
			</INIT>
			<TRIGGERS>
				<TR_BKDIR_DEF_C>
DROP TRIGGER IF EXISTS TR_BKDIR_DEF_C;
CREATE TRIGGER TR_BKDIR_DEF_C AFTER INSERT ON LWH_BKDIR 
BEGIN
	UPDATE LWH_BKDIR
	SET  ROWVERSION = strftime('%Y-%m-%d %H:%M:%f','now')
	WHERE ID=NEW.ID;
END;
				</TR_BKDIR_DEF_C>
				<TR_BKDIR_DEF_U>
DROP TRIGGER IF EXISTS TR_BKDIR_DEF_U;
CREATE TRIGGER TR_BKDIR_DEF_U AFTER UPDATE ON LWH_BKDIR 
BEGIN
	UPDATE LWH_BKDIR
	SET  ROWVERSION = strftime('%Y-%m-%d %H:%M:%f','now')
	WHERE ID=NEW.ID;
END;
				</TR_BKDIR_DEF_U>
			</TRIGGERS>
		</LWH_BKDIR>
		<LWH_BOOKMARK>
			<TABLE>
CREATE TABLE IF NOT EXISTS LWH_BOOKMARK(
	ID INT NOT NULL,
	PARENTBM INT NULL,
	CODE TEXT NULL,
	USERNAME TEXT NULL,
	JSON TEXT NULL,	
	CAPTION TEXT NULL,
	LASTUSER TEXT NULL DEFAULT '',
	ROWVERSION DATETIME DEFAULT CURRENT_TIMESTAMP,
	CONSTRAINT PK_LWH_BOOKMARK PRIMARY KEY (ID));
			</TABLE>
			<TRIGGERS>
				<TR_BOOKMARK_DEF_C>
DROP TRIGGER IF EXISTS TR_BOOKMARK_DEF_C;
CREATE TRIGGER TR_BOOKMARK_DEF_C AFTER INSERT ON LWH_BOOKMARK
BEGIN
	UPDATE LWH_BOOKMARK
	SET  ROWVERSION = strftime('%Y-%m-%d %H:%M:%f','now')
	WHERE ID=NEW.ID;
END;
				</TR_BOOKMARK_DEF_C>
				<TR_BOOKMARK_DEF_U>
DROP TRIGGER IF EXISTS TR_BOOKMARK_DEF_U;
CREATE TRIGGER TR_BOOKMARK_DEF_U AFTER UPDATE ON LWH_BOOKMARK
BEGIN
	UPDATE LWH_BOOKMARK
	SET  ROWVERSION = strftime('%Y-%m-%d %H:%M:%f','now')
	WHERE ID=NEW.ID;
END;
				</TR_BOOKMARK_DEF_U>
			</TRIGGERS>
		</LWH_BOOKMARK>
		<LWH_CFG>
			<TABLE>
CREATE TABLE IF NOT EXISTS LWH_CFG(
	CODE TEXT NOT NULL,
	USERNAME TEXT NOT NULL,
	STRVALUE TEXT NULL,
	INTVALUE integer NULL,
	LASTUSER TEXT NULL DEFAULT '',
	ROWVERSION DATETIME DEFAULT CURRENT_TIMESTAMP,
	CONSTRAINT PK_LWH_CFG PRIMARY KEY (CODE,USERNAME));
			</TABLE>
			<TRIGGERS>
				<TR_CFG_DEF_C>
DROP TRIGGER IF EXISTS TR_CFG_DEF_C;
CREATE TRIGGER TR_CFG_DEF_C AFTER INSERT ON LWH_CFG 
BEGIN
	UPDATE LWH_CFG
	SET  ROWVERSION = strftime('%Y-%m-%d %H:%M:%f','now')
	WHERE CODE=NEW.CODE AND USERNAME=NEW.USERNAME;
END;
				</TR_CFG_DEF_C>
				<TR_CFG_DEF_U>
DROP TRIGGER IF EXISTS TR_CFG_DEF_U;
CREATE TRIGGER TR_CFG_DEF_U AFTER UPDATE ON LWH_CFG 
BEGIN
	UPDATE LWH_CFG
	SET  ROWVERSION = strftime('%Y-%m-%d %H:%M:%f','now')
	WHERE CODE=NEW.CODE AND USERNAME=NEW.USERNAME;
END;
				</TR_CFG_DEF_U>
			</TRIGGERS>
		</LWH_CFG>
		<LWH_COLUMNS>
			<TABLE>
CREATE TABLE IF NOT EXISTS LWH_COLUMNS(
	ID INTEGER PRIMARY KEY,
	TABLE_NAME TEXT NOCHT NULL,
	COLNAME TEXT NOT NULL,
	EXTERNAL_NAME TEXT NOT NULL,
	SYSCOL TEXT NULL,
	TYPE_COL TEXT NOT NULL,
	COLLEN INT NULL,
	PRECIS INT NULL,
	MASK TEXT NULL,
	CHARCASE TEXT NULL,
	DEFVAL TEXT NULL,
	CTRL TEXT NULL,
	JSON TEXT NULL,
	LASTUSER TEXT NULL DEFAULT '',
	ROWVERSION DATETIME DEFAULT CURRENT_TIMESTAMP);
			</TABLE>
			<TRIGGERS>
				<TR_COLUMNS_DEF_C>
DROP TRIGGER IF EXISTS TR_COLUMNS_DEF_C;
CREATE TRIGGER TR_COLUMNS_DEF_C AFTER INSERT ON LWH_COLUMNS 
BEGIN
	UPDATE LWH_COLUMNS
	SET  ROWVERSION = strftime('%Y-%m-%d %H:%M:%f','now')
	WHERE ID=NEW.ID;
END;
				</TR_COLUMNS_DEF_C>
				<TR_COLUMNS_DEF_U>
DROP TRIGGER IF EXISTS TR_COLUMNS_DEF_U;
CREATE TRIGGER TR_COLUMNS_DEF_U AFTER UPDATE ON LWH_COLUMNS 
BEGIN
	UPDATE LWH_COLUMNS
	SET  ROWVERSION = strftime('%Y-%m-%d %H:%M:%f','now')
	WHERE ID=NEW.ID;
END;
				</TR_COLUMNS_DEF_U>
			</TRIGGERS>
		</LWH_COLUMNS>
		<LWH_HISTO>
			<TABLE>
CREATE TABLE IF NOT EXISTS LWH_HISTO(
	DT TEXT NOT NULL,
	CODE TEXT NOT NULL,
	USERNAME TEXT NOT NULL DEFAULT 'admin',
	TIM TEXT NOT NULL DEFAULT '00:00:00',
	JSON TEXT NULL,
	LASTUSER TEXT NULL DEFAULT '',
	ROWVERSION DATETIME DEFAULT CURRENT_TIMESTAMP,
	PRIMARY KEY (DT,CODE,USERNAME));
			</TABLE>
			<TRIGGERS>
				<TR_BKDIR_DEF_C>
DROP TRIGGER IF EXISTS TR_HISTO_DEF_C;
CREATE TRIGGER TR_HISTO_DEF_C AFTER INSERT ON LWH_HISTO 
BEGIN
	UPDATE LWH_HISTO
	SET  ROWVERSION = strftime('%Y-%m-%d %H:%M:%f','now')
	WHERE DT=NEW.DT AND CODE=NEW.CODE AND USERNAME=NEW.USERNAME;
END;
				</TR_BKDIR_DEF_C>
				<TR_BKDIR_DEF_U>
DROP TRIGGER IF EXISTS TR_HISTO_DEF_U;
CREATE TRIGGER TR_HISTO_DEF_U AFTER UPDATE ON LWH_HISTO 
BEGIN
	UPDATE LWH_HISTO
	SET  ROWVERSION = strftime('%Y-%m-%d %H:%M:%f','now')
	WHERE DT=NEW.DT AND CODE=NEW.CODE AND USERNAME=NEW.USERNAME;
END;
				</TR_BKDIR_DEF_U>
			</TRIGGERS>
			<INDEX>
CREATE INDEX UXD_HISTO_DT ON LWH_HISTO (DT, CODE, USERNAME);
			</INDEX>
		</LWH_HISTO>
		<LWH_ID>
			<TABLE>
CREATE TABLE IF NOT EXISTS LWH_ID(
	ENTITY TEXT PRIMARY KEY, 
	ID INTEGER NOT NULL DEFAULT 0);
			</TABLE>
		</LWH_ID>
		<LWH_IHM>
			<TABLE>
CREATE TABLE IF NOT EXISTS LWH_IHM(
	CODE TEXT NOT NULL,
	USERNAME TEXT NOT NULL DEFAULT 'admin',
	JSON TEXT NULL,
	LASTUSER TEXT NULL DEFAULT '',
	ROWVERSION DATETIME DEFAULT CURRENT_TIMESTAMP,
	PRIMARY KEY (CODE,USERNAME));
			</TABLE>
		</LWH_IHM>
		<WORKER>
			<INDEX>
				<IX_WORKER_01>
CREATE INDEX IX_WORKER_01 ON WORKER (SY_CODE);
				</IX_WORKER_01>
				<IX_WORKER_02>
CREATE INDEX IX_WORKER_02 ON WORKER (SY_LASTNAME);
				</IX_WORKER_02>
			</INDEX>
			<TRIGGERS>
				<TR_WORKER_DEF_C>
DROP TRIGGER IF EXISTS TR_WORKER_DEF_C;
CREATE TRIGGER TR_WORKER_DEF_C AFTER INSERT ON WORKER
BEGIN
	UPDATE WORKER
	SET SY_ROWVERSION = strftime('%Y-%m-%d %H:%M:%f','now')
	WHERE SY_ID=NEW.SY_ID;
END;
				</TR_WORKER_DEF_C>
				<TR_WORKER_DEF_U>
DROP TRIGGER IF EXISTS TR_WORKER_DEF_U;
CREATE TRIGGER TR_WORKER_DEF_U AFTER UPDATE ON WORKER
BEGIN
	UPDATE WORKER
	SET SY_ROWVERSION = strftime('%Y-%m-%d %H:%M:%f','now')
	WHERE SY_ID=NEW.SY_ID;
END;
				</TR_WORKER_DEF_U>
			</TRIGGERS>
		</WORKER>
		<CASTMEMO>CAST(TRIM(%s) as VARCHAR)</CASTMEMO>
		<COMMENT>--</COMMENT>
		<CONCAT>||</CONCAT>
		<CREATETABLE>CREATE TABLE IF NOT EXISTS %t (%def, PRIMARY KEY (%p))</CREATETABLE>		
		<DROPTABLE>DROP TABLE IF EXISTS %t</DROPTABLE>
		<GO></GO>
		<IDENTITY>AUTO_INCREMENT</IDENTITY>
		<LIMIT>LIMIT</LIMIT>
		<LINEEND>;</LINEEND>
		<NULLABLE>NULL</NULLABLE>
		<NOTNULLABLE>NOT NULL</NOTNULLABLE>
		<REPLACE>INSERT OR REPLACE INTO %t ( %c ) VALUES(%v)</REPLACE>
		<ROWVERSION>YYYY-MM-DD HH:MM:SS</ROWVERSION>
		<TRIM>TRIM(%s)</TRIM>		
		<TYPECHAR>TEXT</TYPECHAR>
		<TYPEDATE>DATETIME</TYPEDATE>
		<TYPEDECI>REAL</TYPEDECI>
		<TYPEINT>INTEGER</TYPEINT>
		<TYPENUM>NUMERIC</TYPENUM>		
		<TYPEVARCHAR>TEXT</TYPEVARCHAR>
		<INIT>INSERT OR REPLACE INTO LWH_ID(ENTITY,ID) SELECT 'WORKER', MAX(ID) FROM WORKER</INIT>
		<QUERIES>
			<IN001_C>INSERT OR REPLACE INTO LWH_HISTO( DT, USERNAME, CODE, TIM, JSON, LASTUSER, ROWVERSION) VALUES ( :DT, :USERNAME, :CODE, :TIM, :JSON, :LASTUSER, :ROWVERSION)</IN001_C>
			<IN001_U>UPDATE LWH_HISTO SET  TIM=:TIM, JSON=:JSON, LASTUSER=:LASTUSER, ROWVERSION=:ROWVERSION WHERE DT=:DT AND USERNAME= :USERNAME AND CODE= :CODE</IN001_U>
		
			<Q0001>SELECT ID FROM LWH_BKDIR WHERE PARENTBM = %p AND CAPTION='%c'</Q0001>
			<Q0002>SELECT MAX(ID) FROM LWH_BKDIR</Q0002>
			<Q0003>INSERT INTO LWH_BKDIR(ID,PARENTBM,CAPTION,LASTUSER, ROWVERSION) VALUES (%id, %p, '%c', '%u','%ts')</Q0003>
			<Q0004>SELECT ID, CAPTION FROM LWH_BKDIR WHERE ID=%id</Q0004>
			<Q0005>SELECT ID,PARENTBM,CAPTION, LASTUSER, ROWVERSION FROM LWH_BKDIR WHERE PARENTBM = %p ORDER BY ID ASC</Q0005>
			<Q0006>SELECT DT, USERNAME, CODE, TIM, JSON, LASTUSER, ROWVERSION FROM LWH_HISTO WHERE USERNAME='%u' ORDER BY DT DESC, TIM DESC, CODE ASC LIMIT 100</Q0006>
			<Q0007>UPDATE LWH_BKDIR SET CAPTION='%c', LASTUSER='%u', ROWVERSION='%ts' WHERE ID=%id</Q0007>
			<Q0008>SELECT TABLE_NAME, COLNAME,EXTERNAL_NAME, SYSCOL, TYPE_COL, COLLEN, PRECIS, MASK, CHARCASE, DEFVAL, CTRL, JSON FROM LWH_COLUMNS</Q0008>
			<Q0009>SELECT CODE, USERNAME, JSON FROM LWH_IHM WHERE USERNAME='admin' OR USERNAME='%u'</Q0009>
			<Q0010>SELECT SY_ID, CAST(TRIM(SY_CODE) as VARCHAR) AS SY_CODE, SUBSTR(SY_LASTNAME,1,30) AS SY_LASTNAME, SUBSTR(SY_FIRSTNAME,1,25) AS SY_FIRSTNAME FROM WORKER WHERE SY_CODE LIKE '%s%' OR SY_LASTNAME LIKE '%s%'  ORDER BY 2,3</Q0010>
			<Q0011>INSERT OR REPLACE INTO LWH_BKDIR(ID,PARENTBM,CAPTION,LASTUSER, ROWVERSION) VALUES (%id, %p, '%c', '%u','%ts')</Q0011>
			<Q0012>SELECT SY_ID, CAST(TRIM(SY_CODE) as VARCHAR) AS SY_CODE, SUBSTR(SY_LASTNAME,1,30) AS SY_LASTNAME, SUBSTR(SY_FIRSTNAME,1,25) AS SY_FIRSTNAME FROM CUSTOMER WHERE SY_CODE LIKE '%s%' OR SY_LASTNAME LIKE '%s%'  ORDER BY 2,3</Q0012>
			<Q0013>SELECT ID FROM LWH_ID WHERE ENTITY ='%t'</Q0013>
			<Q0014>SELECT SY_CODE, SY_FIRSTNAME, SY_LASTNAME FROM CUSTOMER WHERE SY_ID=%id</Q0014>
			
			<QC001>SELECT DISTINCT TABLE_NAME FROM LWH_COLUMNS</QC001>
			<QC002>SELECT CODE, USERNAME, JSON FROM LWH_IHM WHERE USERNAME='admin' OR USERNAME='%u'</QC002>
			<QC003>DELETE FROM LWH_IHM WHERE CODE='%c' AND USERNAME='%u'</QC003>
			<QC004>INSERT INTO LWH_IHM (CODE,USERNAME,JSON) VALUES ('%c','%u','%j')</QC004>
			<QC005>SELECT 1 FROM LWH_IHM WHERE CODE='%c' AND USERNAME='admin'</QC005>
			<QCF01>SELECT DISTINCT TABLE_NAME FROM LWH_COLUMNS ORDER BY 1</QCF01>			
			<QCF02>SELECT DISTINCT ID,TRIM(COLNAME) AS COLNAME, trim(EXTERNAL_NAME) AS EXTERNAL_NAME, trim(SYSCOL) AS SYSCOL, TYPE_COL, COLLEN, PRECIS, MASK, trim(CHARCASE) AS CHARCASE, trim(DEFVAL) AS DEFVAL, TRIM(CTRL) as CTRL,JSON, LASTUSER, ROWVERSION FROM LWH_COLUMNS WHERE TABLE_NAME = '%t' ORDER BY 1</QCF02>
			<QCF03>SELECT COLNAME, TYPE_COL, COLLEN, PRECIS from LWH_COLUMNS where TABLE_NAME='%t'</QCF03>
			<QCF04>SELECT * FROM %t ORDER BY 1 ASC</QCF04>
			<QID01>SELECT I.ID, MAX(T.SY_ID) FROM LWH_ID I CROSS JOIN %t T WHERE ENTITY ='%t'</QID01>
			<QID02>INSERT OR REPLACE INTO LWH_ID(ENTITY,ID) VALUES ('%t', %r)</QID02>
			<QID03>INSERT OR REPLACE INTO LWH_ID(ENTITY,ID) VALUES ('%t', %r)</QID03>
			<QID04>SELECT SY_CODE from %t where SY_CODE='%code'</QID04>
			<QID05>SELECT MAX(SY_CODE) from %t where SY_CODE LIKE '%code%'</QID05>			
			<QPL01>SELECT P.SY_ID, P.SY_WID, D.C_ID, P.SY_START, P.SY_END, D.SY_DETAIL FROM PLANNING P INNER JOIN DPLANNING D ON D.PL_ID=P.SY_ID WHERE P.SY_WID=%w AND P.SY_START &lt;= '%end' AND P.SY_END &gt;= '%start'</QPL01>
			<QPL02>SELECT SY_ID, SY_WID, SY_START, SY_END FROM PLANNING WHERE SY_WID=%w ORDER BY 3, 4</QPL02>
		</QUERIES>
	</SQLITE>

	<MYSQL>
		<LWH_BKDIR>
			<TABLE>
CREATE TABLE LWH_BKDIR(	
	ID INTEGER NOT NULL,
	PARENTBM INTEGER NULL,
	CAPTION VARCHAR(255) NULL,
	LASTUSER VARCHAR(50) NULL,
	ROWVERSION DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	PRIMARY KEY (ID),
	FOREIGN KEY (PARENTBM) REFERENCES LWH_BKDIR(ID) ON DELETE CASCADE);
			</TABLE>
			<TRIGGERS>
				<TR_BKDIR_DEF_C>
DROP TRIGGER IF EXISTS TR_BKDIR_DEF_C; 
delimiter //
CREATE TRIGGER TR_BKDIR_DEF_C BEFORE INSERT ON LWH_BKDIR
FOR EACH ROW
BEGIN
	SET NEW.LASTUSER=USER();
END;//
delimiter ;
				</TR_BKDIR_DEF_C>
				<TR_BKDIR_DEF_U>
DROP TRIGGER IF EXISTS TR_BKDIR_DEF_U; 				
delimiter //
CREATE TRIGGER TR_BKDIR_DEF_U BEFORE UPDATE ON LWH_BKDIR
FOR EACH ROW
BEGIN
	SET NEW.LASTUSER=USER();
END;//
delimiter ;
				</TR_BKDIR_DEF_U>
			</TRIGGERS>
			<INIT>
REPLACE INTO LWH_BKDIR(ID,PARENTBM,CAPTION) VALUES(0,null,'/');
			</INIT>
		</LWH_BKDIR>
		<LWH_BOOKMARK>
			<TABLE>
CREATE TABLE IF NOT EXISTS LWH_BOOKMARK(
	ID INTEGER NOT NULL,
	PARENTBM INTEGER NULL,
	CODE VARCHAR(15) NULL,
	USERNAME VARCHAR(100) NULL,
	JSON VARCHAR(500) NULL,	
	CAPTION VARCHAR(255) NULL,
	LASTUSER VARCHAR(50) NULL,
	ROWVERSION DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	PRIMARY KEY (ID));
			</TABLE>
		</LWH_BOOKMARK>
		<LWH_CFG>
			<TABLE>
CREATE TABLE IF NOT EXISTS LWH_CFG(
	CODE VARCHAR(15) NOT NULL,
	USERNAME VARCHAR(100) NOT NULL,
	STRVALUE VARCHAR(255) NULL,
	INTVALUE INTEGER NULL,
	LASTUSER VARCHAR(50) NULL,
	ROWVERSION DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	PRIMARY KEY (CODE,USERNAME));
			</TABLE>
		</LWH_CFG>
		<LWH_COLUMNS>
			<TABLE>
CREATE TABLE IF NOT EXISTS LWH_COLUMNS(
	ID INTEGER PRIMARY KEY,
	TABLE_NAME VARCHAR(100) NOT NULL,
	COLNAME VARCHAR(100) NOT NULL,
	EXTERNAL_NAME VARCHAR(100) NOT NULL,
	SYSCOL CHAR(1) NULL,
	TYPE_COL VARCHAR(100) NOT NULL,
	COLLEN INTEGER NULL,
	PRECIS INTEGER NULL,
	MASK TEXT NULL,
	CHARCASE CHAR(1) NULL,
	DEFVAL VARCHAR(255) NULL,
	CTRL VARCHAR(255) NULL,
	JSON VARCHAR(500) NULL,
	LASTUSER VARCHAR(50) NULL,
	ROWVERSION DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP);
			</TABLE>
		</LWH_COLUMNS>
		<LWH_HISTO>
			<TABLE>
CREATE TABLE IF NOT EXISTS LWH_HISTO(
	DT VARCHAR(8) NOT NULL,
	CODE VARCHAR(15) NOT NULL,
	USERNAME VARCHAR(100) NOT NULL DEFAULT 'admin',
	TIM VARCHAR(8) NOT NULL DEFAULT '00:00:00',
	JSON VARCHAR(500) NULL,
	LASTUSER VARCHAR(50) NULL,
	ROWVERSION DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	PRIMARY KEY (DT,CODE,USERNAME));
			</TABLE>
			<INDEX>
CREATE INDEX UXD_HISTO_DT ON LWH_HISTO (DT,CODE,USERNAME);
			</INDEX>
		</LWH_HISTO>
		<LWH_ID>
			<TABLE>
CREATE TABLE IF NOT EXISTS LWH_ID(
	ENTITY VARCHAR(100) PRIMARY KEY, 
	ID INTEGER NOT NULL DEFAULT 0);
			</TABLE>
			<TABLE>
DROP TABLE IF EXISTS PLANNING;
CREATE TABLE IF NOT EXISTS PLANNING (
     SY_ID INTEGER NOT NULL,
     SY_WID INTEGER NULL,
     SY_FORMAT INTEGER NULL,
     SY_START VARCHAR(8) NULL,
     SY_END VARCHAR(8) NULL,
     SY_DETAIL VARCHAR(32000) CHARACTER SET latin1 null,
     SY_LASTUSER VARCHAR(50) NULL,
     SY_ROWVERSION DATE NULL, PRIMARY KEY (SY_ID));
COMMIT;
		</TABLE>
		</LWH_ID>
		<LWH_IHM>
			<TABLE>
CREATE TABLE IF NOT EXISTS LWH_IHM(
	CODE VARCHAR(100) NOT NULL,
	USERNAME VARCHAR(100) NOT NULL DEFAULT 'admin',
	JSON VARCHAR(5000) NULL,
	LASTUSER VARCHAR(50) NULL,
	ROWVERSION DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	PRIMARY KEY (CODE,USERNAME));
			</TABLE>
		</LWH_IHM>
		<STOREDPROCEDURE>
			<SP_GETID>
drop procedure if exists sp_GetID;
DELIMITER //
CREATE PROCEDURE sp_GetID(IN ptable varchar(100), in pset char(1))
begin
	DECLARE ID1 INT DEFAULT 0;
	set @ID2=0;
    select ID into ID1 from lwh_id where ENTITY = ptable;
	set @query= concat('SELECT MAX(SY_ID) INTO @ID2 FROM ',ptable);
    prepare stmt from @query;
    execute stmt; 
    if @ID2>ID1 then
    	set ID1 = @ID2;
    end if;
    set ID1 = ID1 + 1;
    if pset='Y' then
   	    update lwh_id set ID=ID1 where ENTITY = ptable;
    end if;
    select ID1 as SY_ID;
END //  
DELIMITER ;
			</SP_GETID>
		</STOREDPROCEDURE>
		<CASTMEMO>TRIM(%s)</CASTMEMO>
		<COMMENT>--</COMMENT>
		<CREATETABLE>CREATE TABLE IF NOT EXISTS %t (%def, PRIMARY KEY (%p))</CREATETABLE>
		<DROPTABLE>DROP TABLE IF EXISTS %t</DROPTABLE>
		<IDENTITY>AUTO_INCREMENT</IDENTITY>
		<GO>COMMIT;</GO>
		<LIMIT>LIMIT</LIMIT>
		<CONCAT>+</CONCAT>
		<LINEEND>;</LINEEND>
		<NULLABLE>NULL</NULLABLE>
		<NOTNULLABLE>NOT NULL</NOTNULLABLE>
		<REPLACE>REPLACE INTO %t ( %c ) VALUES(%v)</REPLACE>
		<TRIM>TRIM(%s)</TRIM>
		<TYPECHAR>CHAR(%l)</TYPECHAR>
		<TYPEDECI>DECIMAL(%l, %p)</TYPEDECI>
		<TYPEINT>INTEGER</TYPEINT>
		<TYPENUM>FLOAT</TYPENUM>
		<TYPEVARCHAR>VARCHAR(%l)</TYPEVARCHAR>
		<INIT>REPLACE INTO LWH_ID(ENTITY,ID) SELECT 'WORKER', MAX(ID) FROM WORKER</INIT>

		<QUERIES>	
			<IN001_C>REPLACE INTO LWH_HISTO( DT, USERNAME, CODE, TIM, JSON, LASTUSER, ROWVERSION) VALUES ( :DT, :USERNAME, :CODE, :TIM, :JSON, :LASTUSER, :ROWVERSION)</IN001_C>			
			<IN001_U>UPDATE LWH_HISTO SET  TIM=:TIM, JSON=:JSON, LASTUSER=:LASTUSER, ROWVERSION=:ROWVERSION WHERE DT=:DT AND USERNAME= :USERNAME AND CODE= :CODE</IN001_U>
		
			<Q0001>SELECT ID FROM LWH_BKDIR WHERE PARENTBM = %p AND CAPTION='%c'</Q0001>
			<Q0002>SELECT MAX(ID) FROM LWH_BKDIR</Q0002>
			<Q0003>INSERT INTO LWH_BKDIR(ID,PARENTBM,CAPTION,LASTUSER, ROWVERSION) VALUES (%id, %p, '%c', '%u','%ts')</Q0003>
			<Q0004>SELECT ID, CAPTION FROM LWH_BKDIR WHERE ID=%id</Q0004>
			<Q0005>SELECT ID,PARENTBM,CAPTION, LASTUSER, ROWVERSION FROM LWH_BKDIR WHERE PARENTBM = %p ORDER BY ID ASC</Q0005>
			<Q0006>SELECT DT, USERNAME, CODE, TIM, JSON, LASTUSER, ROWVERSION FROM LWH_HISTO WHERE USERNAME='%u' ORDER BY DT DESC, TIM DESC, CODE ASC LIMIT 100</Q0006>
			<Q0007>UPDATE LWH_BKDIR SET CAPTION='%c', LASTUSER='%u', ROWVERSION='%ts' WHERE ID=%id</Q0007>
			<Q0008>SELECT TABLE_NAME, COLNAME,EXTERNAL_NAME, SYSCOL, TYPE_COL, COLLEN, PRECIS, MASK, CHARCASE, DEFVAL, CTRL, JSON FROM LWH_COLUMNS</Q0008>
			<Q0009>SELECT CODE, USERNAME, JSON FROM LWH_IHM WHERE USERNAME='admin' OR USERNAME='%u'</Q0009>
			<Q0010>SELECT SY_ID, SUBSTR(SY_CODE,1,10) AS SY_CODE, SUBSTR(SY_LASTNAME,1,30) AS SY_LASTNAME, SUBSTR(SY_FIRSTNAME,1,25) AS SY_FIRSTNAME FROM WORKER WHERE SY_CODE LIKE '%s%' OR SY_LASTNAME LIKE '%s%'  ORDER BY 2,3</Q0010>
			<Q0011>REPLACE INTO LWH_BKDIR(ID,PARENTBM,CAPTION,LASTUSER, ROWVERSION) VALUES (%id, %p, '%c', '%u','%ts')</Q0011>
			<Q0012>SELECT SY_ID, SUBSTR(SY_CODE,1,10) AS SY_CODE, SUBSTR(SY_LASTNAME,1,30) AS SY_LASTNAME, SUBSTR(SY_FIRSTNAME,1,25) AS SY_FIRSTNAME FROM CUSTOMER WHERE SY_CODE LIKE '%s%' OR SY_LASTNAME LIKE '%s%'  ORDER BY 2,3</Q0012>
			<Q0013>SELECT ID FROM LWH_ID WHERE ENTITY ='%t'</Q0013>
			<Q0014>SELECT SY_CODE, SY_FIRSTNAME, SY_LASTNAME FROM CUSTOMER WHERE SY_ID=%id</Q0014>
			
			<QC001>SELECT DISTINCT TABLE_NAME FROM LWH_COLUMNS</QC001>
			<QC002>SELECT CODE, USERNAME, JSON FROM LWH_IHM WHERE USERNAME='admin' OR USERNAME='%u'</QC002>
			<QC003>DELETE FROM LWH_IHM WHERE CODE='%c' AND USERNAME='%u'</QC003>
			<QC004>INSERT INTO LWH_IHM (CODE,USERNAME,JSON) VALUES ('%c','%u','%j')</QC004>
			<QC005>SELECT 1 FROM LWH_IHM WHERE CODE='%c' AND USERNAME='admin'</QC005>
			<QCF01>SELECT DISTINCT TABLE_NAME FROM LWH_COLUMNS ORDER BY 1</QCF01>
			<QCF02>SELECT DISTINCT ID,TRIM(COLNAME) AS COLNAME, trim(EXTERNAL_NAME) AS EXTERNAL_NAME, trim(SYSCOL) AS SYSCOL, TYPE_COL, COLLEN, PRECIS, MASK, CHARCASE, DEFVAL, CTRL,JSON, LASTUSER, ROWVERSION FROM LWH_COLUMNS ORDER BY 1</QCF02>
			<QCF03>SELECT COLNAME, TYPE_COL, COLLEN, PRECIS from LWH_COLUMNS where TABLE_NAME='%t'</QCF03>
			<QCF04>SELECT * FROM %t ORDER BY 1 ASC</QCF04>
			<QID01>SELECT I.ID, MAX(T.SY_ID) FROM LWH_ID I CROSS JOIN %t T WHERE ENTITY ='%t'</QID01>
			<QID02>REPLACE INTO LWH_ID(ENTITY,ID) VALUES ('%t', %r)</QID02>
			<QID03>REPLACE INTO LWH_ID(ENTITY,ID) VALUES ('%t', %r)</QID03>
			<QID04>SELECT SY_CODE from %t where SY_CODE='%code'</QID04>
			<QID05>SELECT MAX(SY_CODE) from %t where SY_CODE LIKE '%code%'</QID05>
			
			<SP001>call sp_GetID('%t','%set')</SP001>
		</QUERIES>
	</MYSQL>
	
	<POSTGRESQL>
		<LWH_BKDIR>
			<TABLE>
CREATE TABLE LWH_BKDIR(	
	ID INTEGER NOT NULL,
	PARENTBM INTEGER NULL,
	CAPTION VARCHAR(255) NULL,
	LASTUSER VARCHAR(50) NULL,
	ROWVERSION TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW(), 
	PRIMARY KEY (ID),
	FOREIGN KEY (PARENTBM) REFERENCES LWH_BKDIR(ID) ON DELETE CASCADE);
			</TABLE>
			<TRIGGERS>
				<F_SET_TIMESTAMP>
CREATE OR REPLACE FUNCTION F_SET_TIMESTAMP() 
RETURNS TRIGGER AS $F_SET_TIMESTAMP$
BEGIN
  NEW.ROWVERSION = NOW();
  NEW.LASTUSER = CURRENT_USER;
  RETURN NEW;
END;
$F_SET_TIMESTAMP$ LANGUAGE plpgsql;
				</F_SET_TIMESTAMP>
				<TR_BKDIR_DEF_CU>
DROP TRIGGER IF EXISTS TR_BKDIR_DEF_CU ON LWH_BKDIR;
CREATE TRIGGER TR_BKDIR_DEF_CU
AFTER INSERT OR UPDATE ON LWH_BKDIR
FOR EACH ROW
EXECUTE PROCEDURE F_SET_TIMESTAMP();
				</TR_BKDIR_DEF_CU>
			</TRIGGERS>
			<GRANT>
GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE ON LWH_BKDIR TO PUBLIC;
			</GRANT>
			<INIT>
WITH upsert AS (UPDATE LWH_BKDIR SET PARENTBM=null, CAPTION='/' WHERE ID=0 RETURNING *) INSERT INTO LWH_BKDIR(ID,PARENTBM,CAPTION) SELECT 0,null,'/' WHERE NOT EXISTS (SELECT * FROM upsert);
			</INIT>
		</LWH_BKDIR>
		<LWH_BOOKMARK>
			<TABLE>
CREATE TABLE IF NOT EXISTS LWH_BOOKMARK(
	ID INTEGER NOT NULL,
	PARENTBM INTEGER NULL,
	CODE VARCHAR(15) NULL,
	USERNAME VARCHAR(100) NULL,
	JSON VARCHAR(500) NULL,	
	CAPTION VARCHAR(255) NULL,
	LASTUSER VARCHAR(50) NULL,
	ROWVERSION TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW(),
	PRIMARY KEY (ID));
			</TABLE>
			<TRIGGERS>
				<TR_BOOKMARK_DEF_CU>
DROP TRIGGER IF EXISTS TR_BOOMARK_DEF_CU ON LWH_BOOKMARK;
CREATE TRIGGER TR_CFG_DEF_CU
AFTER INSERT OR UPDATE ON LWH_BOOKMARK
FOR EACH ROW
EXECUTE PROCEDURE F_SET_TIMESTAMP();
				</TR_BOOKMARK_DEF_CU>
			</TRIGGERS>
			<GRANT>
GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE ON LWH_BOOKMARK TO PUBLIC;
			</GRANT>
		</LWH_BOOKMARK>
		<LWH_CFG>
			<TABLE>
CREATE TABLE IF NOT EXISTS LWH_CFG(
	CODE VARCHAR(15) NOT NULL,
	USERNAME VARCHAR(100) NOT NULL,
	STRVALUE VARCHAR(255) NULL,
	INTVALUE INTEGER NULL,
	LASTUSER VARCHAR(50) NULL,
	ROWVERSION TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW(),
	PRIMARY KEY (CODE,USERNAME));
			</TABLE>
			<TRIGGERS>
				<TR_CFG_DEF_CU>
DROP TRIGGER IF EXISTS TR_CFG_DEF_CU ON LWH_CFG;
CREATE TRIGGER TR_CFG_DEF_CU
AFTER INSERT OR UPDATE ON LWH_CFG
FOR EACH ROW
EXECUTE PROCEDURE F_SET_TIMESTAMP();
				</TR_CFG_DEF_CU>
			</TRIGGERS>
			<GRANT>
GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE ON LWH_CFG TO PUBLIC;
			</GRANT>
		</LWH_CFG>
		<LWH_COLUMNS>
			<TABLE>
CREATE TABLE IF NOT EXISTS LWH_COLUMNS(
	ID INTEGER PRIMARY KEY,
	TABLE_NAME VARCHAR(100) NOT NULL,
	COLNAME VARCHAR(100) NOT NULL,
	EXTERNAL_NAME VARCHAR(100) NOT NULL,
	SYSCOL CHAR(1) NULL DEFAULT 'N',
	TYPE_COL VARCHAR(50) NOT NULL,
	COLLEN INTEGER NULL,
	PRECIS INTEGER NULL,
	MASK VARCHAR(255) NULL,
	CHARCASE CHAR(1) NULL DEFAULT 'A',
	DEFVAL VARCHAR(255) NULL,
	CTRL VARCHAR(255) NULL,
	JSON VARCHAR(8000) NULL,
	LASTUSER VARCHAR(50) NULL,
	ROWVERSION TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW());
			</TABLE>
			<GRANT>
GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE ON LWH_COLUMNS TO PUBLIC;
			</GRANT>
			<TRIGGERS>
				<TR_COLUMNS_DEF_CU>
DROP TRIGGER IF EXISTS TR_COLUMNS_DEF_CU ON LWH_IHM;
CREATE TRIGGER TR_COLUMNS_DEF_CU
AFTER INSERT OR UPDATE ON LWH_COLUMNS
FOR EACH ROW
EXECUTE PROCEDURE F_SET_TIMESTAMP();
				</TR_COLUMNS_DEF_CU>
			</TRIGGERS>
		</LWH_COLUMNS>
		<LWH_HISTO>
			<TABLE>
CREATE TABLE IF NOT EXISTS LWH_HISTO(
	DT VARCHAR(8) NOT NULL,
	CODE VARCHAR(15) NOT NULL,
	USERNAME VARCHAR(100) NOT NULL DEFAULT 'admin',
	TIM VARCHAR(8) NOT NULL DEFAULT '00:00:00',
	JSON VARCHAR(500) NULL,
	LASTUSER VARCHAR(50) NULL,
	ROWVERSION TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW(),
	PRIMARY KEY (DT,CODE,USERNAME));
			</TABLE>
			<INDEX>
CREATE INDEX UXD_HISTO_DT ON LWH_HISTO (DT,CODE,USERNAME);
			</INDEX>
			<TRIGGERS>
				<TR_HISTO_DEF_CU>
DROP TRIGGER IF EXISTS TR_HISTO_DEF_CU ON LWH_HISTO;
CREATE TRIGGER TR_HISTO_DEF_CU
AFTER INSERT OR UPDATE ON LWH_HISTO
FOR EACH ROW
EXECUTE PROCEDURE F_SET_TIMESTAMP();
				</TR_HISTO_DEF_CU>
			</TRIGGERS>
			<GRANT>
GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE ON LWH_HISTO TO PUBLIC;
			</GRANT>
		</LWH_HISTO>
		<LWH_ID>
			<TABLE>
CREATE TABLE IF NOT EXISTS LWH_ID(
	ENTITY VARCHAR(100) PRIMARY KEY, 
	ID INTEGER NOT NULL DEFAULT 0);
			</TABLE>
			<GRANT>
GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE ON LWH_ID TO PUBLIC;
			</GRANT>
		</LWH_ID>
		<LWH_IHM>
			<TABLE>
CREATE TABLE IF NOT EXISTS LWH_IHM(
	CODE VARCHAR(100) NOT NULL,
	USERNAME VARCHAR(100) NOT NULL DEFAULT 'admin',
	JSON VARCHAR(8000) NULL,
	LASTUSER VARCHAR(50) NULL,
	ROWVERSION TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW(),
	PRIMARY KEY (CODE,USERNAME));
			</TABLE>
			<TRIGGERS>
				<TR_IHM_DEF_CU>
DROP TRIGGER IF EXISTS TR_IHM_DEF_CU ON LWH_IHM;
CREATE TRIGGER TR_HISTO_DEF_CU
AFTER INSERT OR UPDATE ON LWH_IHM
FOR EACH ROW
EXECUTE PROCEDURE F_SET_TIMESTAMP();
				</TR_IHM_DEF_CU>
			</TRIGGERS>
			<GRANT>
GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE ON LWH_IHM TO PUBLIC;
			</GRANT>
		</LWH_IHM>
		<WORKER>
			<GRANT>
GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE ON WORKER TO PUBLIC;
			</GRANT>
			<INDEX>
				<IX_WORKER_01>
CREATE UNIQUE INDEX IX_WORKER_01 ON WORKER(SY_CODE);
				</IX_WORKER_01>
				<IX_WORKER_02>
CREATE INDEX IX_WORKER_02 ON WORKER(SY_LASTNAME);
				</IX_WORKER_02>
			</INDEX>
			<TRIGGERS>
				<F_SET_SYTIMESTAMP>
CREATE OR REPLACE FUNCTION F_SET_SYTIMESTAMP() 
RETURNS TRIGGER AS $F_SET_SYTIMESTAMP$
BEGIN
  NEW.SY_ROWVERSION = NOW();
  NEW.SY_LASTUSER = CURRENT_USER;
  RETURN NEW;
END;
$F_SET_SYTIMESTAMP$ LANGUAGE plpgsql;
				</F_SET_SYTIMESTAMP>
				<TR_WORKER_DEF_CU>
DROP TRIGGER IF EXISTS TR_WORKER_DEF_CU ON WORKER;
CREATE TRIGGER TR_WORKER_DEF_CU
AFTER INSERT OR UPDATE ON WORKER
FOR EACH ROW
EXECUTE PROCEDURE F_SET_SYTIMESTAMP();
				</TR_WORKER_DEF_CU>
			</TRIGGERS>
		</WORKER>

		<CASTMEMO>CAST(TRIM(%s) as VARCHAR)</CASTMEMO>
		<COMMENT>--</COMMENT>
		<CONCAT>+</CONCAT>
		<CREATETABLE>CR		<STOREDPROCEDURE>
			<SP_GETID>
DROP FUNCTION IF EXISTS sp_GetID(IN ptable varchar(100), in pset char(1)); 
CREATE or replace FUNCTION sp_GetID(IN ptable varchar(100), in pset char(1))
returns integer
AS $$
DECLARE 
    ID1 integer default 0;
    ID2 INT DEFAULT 0;
begin
    select ID into ID1 from lwh_id where ENTITY = ptable;
    if ptable='CUSTOMER' THEN 
   		select MAX(SY_ID) into ID2 from CUSTOMER;   	
   	end if;
    if ptable='WORKER' THEN 
   		select MAX(SY_ID) into ID2 from WORKER;
   	end if;
    if ID2>ID1 then
    	ID1 := ID2;
    end if;
    ID1 := ID1 + 1;
    if pset='Y' then
   	 update lwh_id set ID=ID1 where ENTITY = ptable;
    end if;
    return ID1;
END ;
$$ LANGUAGE plpgsql;
			</SP_GETID>
		</STOREDPROCEDURE>EATE TABLE IF NOT EXISTS %t (%def, PRIMARY KEY (%p))</CREATETABLE>
		<DROPTABLE>DROP TABLE IF EXISTS %t</DROPTABLE>
		<GO>COMMIT;</GO>
		<IDENTITY>AUTO_INCREMENT</IDENTITY>
		<LIMIT>LIMIT</LIMIT>
		<LINEEND>;</LINEEND>
		<NULLABLE>NULL</NULLABLE>
		<NOTNULLABLE>NOT NULL</NOTNULLABLE>
		<REPLACE>REPLACE INTO %t ( %c ) VALUES(%v)</REPLACE>
		<ROWVERSION>YYYY-MM-DD HH:MM:SS</ROWVERSION>
		<TRIM>TRIM(%s)</TRIM>
		<TYPECHAR>CHAR(%l)</TYPECHAR>
		<TYPEDECI>REAL</TYPEDECI>
		<TYPEINT>INTEGER</TYPEINT>
		<TYPENUM>NUMERIC</TYPENUM>		
		<TYPEVARCHAR>VARCHAR(%l)</TYPEVARCHAR>
		<INIT>REPLACE INTO LWH_ID(ENTITY,ID) SELECT 'WORKER', MAX(ID) FROM WORKER</INIT>

		<QUERIES>
			<IN001>INSERT OR REPLACE INTO LWH_HISTO( DT, USERNAME, CODE, TIM, JSON, LASTUSER, ROWVERSION) VALUES ( :DT, :USERNAME, :CODE, :TIM, :JSON, :LASTUSER, :ROWVERSION)</IN001>
		
			<Q0001>SELECT ID FROM LWH_BKDIR WHERE PARENTBM = %p AND CAPTION='%c'</Q0001>
			<Q0002>SELECT MAX(ID) FROM LWH_BKDIR</Q0002>
			<Q0003>INSERT INTO LWH_BKDIR(ID,PARENTBM,CAPTION,LASTUSER, ROWVERSION) VALUES (%id, %p, '%c', '%u','%ts')</Q0003>
			<Q0004>SELECT ID, CAPTION FROM LWH_BKDIR WHERE ID=%id</Q0004>
			<Q0005>SELECT ID,PARENTBM,CAPTION, LASTUSER, ROWVERSION FROM LWH_BKDIR WHERE PARENTBM = %p ORDER BY ID ASC</Q0005>
			<Q0006>SELECT DT, USERNAME, CODE, TIM, JSON, LASTUSER, ROWVERSION FROM LWH_HISTO WHERE USERNAME='%u' ORDER BY DT DESC, TIM DESC, CODE ASC LIMIT 100</Q0006>
			<Q0007>UPDATE LWH_BKDIR SET CAPTION='%c', LASTUSER='%u', ROWVERSION='%ts' WHERE ID=%id</Q0007>
			<Q0008>SELECT TABLE_NAME, COLNAME,EXTERNAL_NAME, SYSCOL, TYPE_COL, COLLEN, PRECIS, MASK, CHARCASE, DEFVAL, CTRL, JSON FROM LWH_COLUMNS</Q0008>
			<Q0009>SELECT CODE, USERNAME, JSON FROM LWH_IHM WHERE USERNAME='admin' OR USERNAME='%u'</Q0009>
			<Q0010>SELECT SY_ID, CAST(TRIM(SY_CODE) as VARCHAR) AS SY_CODE, CAST(TRIM(SY_LASTNAME) as VARCHAR) AS SY_LASTNAME, CAST(TRIM(SY_FIRSTNAME) as VARCHAR) AS SY_FIRSTNAME FROM WORKER WHERE SY_CODE LIKE '%s%' OR SY_LASTNAME LIKE '%s%'  ORDER BY 2,3</Q0010>
			<Q0011>INSERT OR REPLACE INTO LWH_BKDIR(ID,PARENTBM,CAPTION,LASTUSER, ROWVERSION) VALUES (%id, %p, '%c', '%u','%ts')</Q0011>
			<Q0012>SELECT SY_ID, CAST(TRIM(SY_CODE) as VARCHAR) AS SY_CODE, CAST(TRIM(SY_LASTNAME) as VARCHAR) AS SY_LASTNAME, CAST(TRIM(SY_FIRSTNAME) as VARCHAR) AS SY_FIRSTNAME FROM CUSTOMER WHERE SY_CODE LIKE '%s%' OR SY_LASTNAME LIKE '%s%'  ORDER BY 2,3</Q0012>
			<Q0013>SELECT ID FROM LWH_ID WHERE ENTITY ='%t'</Q0013>
			
			<QC001>SELECT DISTINCT TABLE_NAME, PRIORITY FROM LWH_COLUMNS ORDER BY PRIORITY ASC</QC001>
			<QC002>SELECT CODE, USERNAME, JSON FROM LWH_IHM WHERE USERNAME='admin' OR USERNAME='%u'</QC002>
			<QC003>DELETE FROM LWH_IHM WHERE CODE='%c' AND USERNAME='%u'</QC003>
			<QC004>INSERT INTO LWH_IHM (CODE,USERNAME,JSON) VALUES ('%c','%u','%j')</QC004>
			<QC005>SELECT 1 FROM LWH_IHM WHERE CODE='%c' AND USERNAME='admin'</QC005>
			<QCF01>SELECT DISTINCT TABLE_NAME FROM LWH_COLUMNS ORDER BY 1</QCF01>
			<QCF02>SELECT DISTINCT ID,TRIM(COLNAME) AS COLNAME, trim(EXTERNAL_NAME) AS EXTERNAL_NAME, trim(SYSCOL) AS SYSCOL, TYPE_COL, COLLEN, PRECIS, MASK, CHARCASE, DEFVAL, CTRL,JSON, LASTUSER, ROWVERSION FROM LWH_COLUMNS ORDER BY 1</QCF02>
			<QCF03>SELECT COLNAME, TYPE_COL, COLLEN, PRECIS from LWH_COLUMNS where TABLE_NAME='%t'</QCF03>
			<QCF04>SELECT * FROM %t ORDER BY 1 ASC</QCF04>
			<QID01>SELECT I.ID, MAX(T.SY_ID) FROM LWH_ID I CROSS JOIN %t T WHERE ENTITY ='%t'</QID01>
			<QID02>INSERT OR REPLACE INTO LWH_ID(ENTITY,ID) VALUES ('%t', %r)</QID02>
			<QID03>INSERT OR REPLACE INTO LWH_ID(ENTITY,ID) VALUES ('%t', %r)</QID03>
			<QID04>SELECT SY_CODE from %t where SY_CODE='%code'</QID04>
			<QID05>SELECT COUNT(*) from %t where SY_CODE LIKE '%code%'</QID05>
			
			
			<SP001>SELECT sp_GetID('%t','%set')</SP001>

		</QUERIES>
	</POSTGRESQL>
	
	<SQLSERVER>
			<LWH_BKDIR>
			<TABLE>
CREATE TABLE LWH_BKDIR(	
	ID INTEGER NOT NULL,
	PARENTBM INTEGER NULL,
	CAPTION VARCHAR(255) NULL,
	LASTUSER VARCHAR(50) NULL DEFAULT USER_NAME(),
	ROWVERSION DATETIME NULL DEFAULT GETDATE() 
	CONSTRAINT PK_LWH_BKDIR PRIMARY KEY (ID),
	CONSTRAINT FK_BKDIR FOREIGN KEY (PARENTBM) REFERENCES LWH_BKDIR(ID) );
			</TABLE>
			<TRIGGERS>
				<TR_BKDIR_DEF_CU>
CREATE OR ALTER TRIGGER TR_BKDIR_DEF_U ON LWH_BKDIR
FOR INSERT, UPDATE AS
BEGIN
	UPDATE LWH_BKDIR SET
	[ROWVERSION]=GETDATE(),
	[LASTUSER] = ORIGINAL_LOGIN() WHERE ID IN (SELECT I.ID FROM INSERTED I);
END;
				</TR_BKDIR_DEF_CU>
			</TRIGGERS>
			<GRANT>
GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE ON LWH_BKDIR TO PUBLIC;
			</GRANT>
			<INIT>
IF NOT EXISTS(SELECT 1 FROM LWH_BKDIR WHERE ID=0) INSERT INTO LWH_BKDIR (ID, PARENTBM, CAPTION) VALUES (0,null,'/');
			</INIT>
		</LWH_BKDIR>
		<LWH_BOOKMARK>
			<TABLE>
CREATE TABLE LWH_BOOKMARK(
	ID INTEGER NOT NULL,
	PARENTBM INTEGER NULL,
	CODE VARCHAR(15) NULL,
	USERNAME VARCHAR(100) NULL,
	JSON VARCHAR(500) NULL,	
	CAPTION VARCHAR(255) NULL,
	LASTUSER VARCHAR(50) NULL DEFAULT USER_NAME(),
	ROWVERSION DATETIME NULL DEFAULT GETDATE(),
	PRIMARY KEY (ID));
			</TABLE>
			<TRIGGERS>
				<TR_BOOKMARK_DEF_CU>
CREATE OR ALTER TRIGGER TR_BOOKMARK_DEF_CU ON LWH_BOOKMARK
FOR INSERT, UPDATE AS
BEGIN
	UPDATE LWH_BOOKMARK SET
	[ROWVERSION]=GETDATE(),
	[LASTUSER] = ORIGINAL_LOGIN() WHERE ID IN (SELECT I.ID FROM INSERTED I);
END;
				</TR_BOOKMARK_DEF_CU>
			</TRIGGERS>
			<GRANT>
GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE ON LWH_BOOKMARK TO PUBLIC;
			</GRANT>
		</LWH_BOOKMARK>
		<LWH_CFG>
			<TABLE>
CREATE TABLE LWH_CFG(
	CODE VARCHAR(15) NOT NULL,
	USERNAME VARCHAR(100) NOT NULL,
	STRVALUE VARCHAR(255) NULL,
	INTVALUE INTEGER NULL,
	LASTUSER VARCHAR(50) NULL DEFAULT USER_NAME(),
    ROWVERSION DATETIME NULL DEFAULT GETDATE(),
	PRIMARY KEY (CODE,USERNAME));
			</TABLE>
			<TRIGGERS>
				<TR_CFG_DEF_CU>
CREATE OR ALTER TRIGGER TR_CFG_DEF_CU ON LWH_CFG
FOR INSERT, UPDATE AS
BEGIN
	UPDATE LWH_CFG SET
	[ROWVERSION]=GETDATE(),
	[LASTUSER] = ORIGINAL_LOGIN() WHERE EXISTS (
		SELECT 1 FROM INSERTED I WHERE CODE=LWH_CFG.CODE AND
		I.USERNAME=LWH_CFG.USERNAME);
END;
				</TR_CFG_DEF_CU>
			</TRIGGERS>
			<GRANT>
GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE ON LWH_CFG TO PUBLIC;
			</GRANT>
		</LWH_CFG>
		<LWH_COLUMNS>
			<TABLE>
CREATE TABLE LWH_COLUMNS (
  ID INTEGER NOT NULL,
  TABLE_NAME VARCHAR(50) NOT NULL,
  COLNAME VARCHAR(50) NOT NULL,
  EXTERNAL_NAME VARCHAR(50) NOT NULL,
  SYSCOL CHAR(1) NULL DEFAULT 'N',
  TYPE_COL VARCHAR(50) NOT NULL,
  COLLEN INTEGER NULL DEFAULT 0,
  PRECIS INTEGER NULL DEFAULT 0,
  MASK VARCHAR(255) NULL,
  CHARCASE CHAR(1) NULL DEFAULT 'A',
  DEFVAL VARCHAR(255) NULL,
  CTRL VARCHAR(255) NULL,
  JSON VARCHAR(8000) NULL,
  LASTUSER VARCHAR(50) NULL DEFAULT USER_NAME(),
  ROWVERSION DATETIME NULL DEFAULT GETDATE(),
  CONSTRAINT PK_LWH_COLUMNS PRIMARY KEY (ID));
			</TABLE>
			<GRANT>
GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE ON LWH_COLUMNS TO PUBLIC;
			</GRANT>
			<TRIGGERS>
				<TR_COLUMS_DEF_CU>
CREATE OR ALTER TRIGGER TR_COLUMNS_DEF_CU ON LWH_COLUMNS
FOR INSERT, UPDATE AS
BEGIN
	UPDATE LWH_COLUMNS SET
	[ROWVERSION]=GETDATE(),
	[LASTUSER] = ORIGINAL_LOGIN() WHERE ID IN (SELECT I.ID FROM INSERTED I);
END;
				</TR_COLUMS_DEF_CU>
			</TRIGGERS>
		</LWH_COLUMNS>
		<LWH_HISTO>
			<TABLE>
CREATE TABLE LWH_HISTO(
	DT VARCHAR(8) NOT NULL,
	CODE VARCHAR(15) NOT NULL,
	USERNAME VARCHAR(100) DEFAULT 'admin' NOT NULL,
	TIM VARCHAR(8) DEFAULT '00:00:00' NOT NULL,
	JSON VARCHAR(500) NULL,
	LASTUSER VARCHAR(50) NULL DEFAULT USER_NAME(),
	ROWVERSION DATETIME NULL DEFAULT GETDATE(),
	PRIMARY KEY (DT,CODE,USERNAME));
        	</TABLE>
			<TRIGGERS>
				<TR_HISTO_DEF_CU>
CREATE OR ALTER TRIGGER TR_HISTO_DEF_CU ON LWH_HISTO
FOR INSERT, UPDATE AS
BEGIN
	UPDATE LWH_HISTO SET
	[ROWVERSION]=GETDATE(),
	[LASTUSER] = ORIGINAL_LOGIN() WHERE EXISTS (SELECT 1 FROM INSERTED I WHERE 
	I.DT = LWH_HISTO.DT AND I.CODE=LWH_HISTO.CODE AND I.USERNAME=LWH_HISTO.USERNAME);
END;
				</TR_HISTO_DEF_CU>
			</TRIGGERS>
			<GRANT>
GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE ON LWH_HISTO TO PUBLIC;
			</GRANT>
			<INDEX>
CREATE INDEX UXD_HISTO_DT ON LWH_HISTO (DT);
			</INDEX>
		</LWH_HISTO>
		<LWH_ID>
			<TABLE>
CREATE TABLE LWH_ID(
	ENTITY VARCHAR(100) PRIMARY KEY, 
	ID INTEGER DEFAULT 0 NOT NULL );
			</TABLE>
			<GRANT>
GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE ON LWH_ID TO PUBLIC;
			</GRANT>
		</LWH_ID>
		<LWH_IHM>
			<TABLE>
CREATE TABLE LWH_IHM
(
  CODE VARCHAR(100) NOT NULL,
  USERNAME VARCHAR(100) NOT NULL,
  JSON VARCHAR(8000) NULL,
  LASTUSER VARCHAR(50) NULL DEFAULT USER_NAME(),
  ROWVERSION DATETIME NULL DEFAULT GETDATE(),
  CONSTRAINT PK_LWH_IHM PRIMARY KEY (CODE,USERNAME));
			</TABLE>
			<GRANT>
GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE ON LWH_IHM TO PUBLIC;
			</GRANT>
			<TRIGGERS>
				<TR_IHM_DEF_CU>
CREATE OR ALTER TRIGGER TR_IHM_DEF_CU ON LWH_IHM
FOR INSERT, UPDATE AS
BEGIN
	UPDATE LWH_IHM SET
	[ROWVERSION]=GETDATE(),
	[LASTUSER] = ORIGINAL_LOGIN() WHERE EXISTS( SELECT 1 FROM INSERTED I
	WHERE I.CODE=LWH_IHM.CODE AND I.USERNAME=LWH_IHM.USERNAME);
END;
				</TR_IHM_DEF_CU>
			</TRIGGERS>
		</LWH_IHM>
		<WORKER>
			<GRANT>
GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE ON WORKER TO PUBLIC;
			</GRANT>
			<INDEX>
				<IX_WORKER_01>
CREATE UNIQUE NONCLUSTERED INDEX IX_WORKER_01 ON WORKER(SY_CODE);
				</IX_WORKER_01>
				<IX_WORKER_02>
CREATE  NONCLUSTERED INDEX IX_WORKER_02 ON WORKER(SY_LASTNAME);
				</IX_WORKER_02>
			</INDEX>
			<TRIGGERS>
				<TR_WORKER_DEF_CU>
CREATE OR ALTER TRIGGER TR_WORKER_DEF_CU ON WORKER
FOR INSERT, UPDATE AS
BEGIN
	UPDATE WORKER SET
	[SY_ROWVERSION]=GETDATE(),
	[SY_LASTUSER] = USER_NAME() WHERE SY_ID IN (SELECT I.SY_ID FROM INSERTED I);
END;
				</TR_WORKER_DEF_CU>
			</TRIGGERS>
		</WORKER>
		<CASTMEMO>RTRIM(%s)</CASTMEMO>
		<COMMENT>--</COMMENT>
		<CONCAT>+</CONCAT>
		<CREATETABLE>CREATE TABLE %t (%def, CONSTRAINT PK_%t PRIMARY KEY (%p))</CREATETABLE>
		<DROPTABLE>DROP TABLE %t</DROPTABLE>	
		<GO>GO</GO>
		<IDENTITY>INDENTITY</IDENTITY>
		<LIMIT>TOP</LIMIT>
		<LINEEND>;</LINEEND>
		<NULLABLE>NULL</NULLABLE>
		<NOTNULLABLE>NOT NULL</NOTNULLABLE>
		<REPLACE></REPLACE>
		<ROWVERSION>YYYY-MM-DD HH:MM:SS.ZZZ</ROWVERSION>
		<TRIM>RTRIM(%s)</TRIM>
		<TYPECHAR>VARCHAR(%l)</TYPECHAR>
		<TYPEDATE>DATETIME</TYPEDATE>
		<TYPEDECI>REAL</TYPEDECI>
		<TYPEINT>INTEGER</TYPEINT>
		<TYPENUM>NUMERIC</TYPENUM>
		<TYPEVARCHAR>VARCHAR(%l)</TYPEVARCHAR>
		
		<INIT>--</INIT>
		<QUERIES>
			<Q0001>SELECT ID FROM LWH_BKDIR WHERE PARENTBM = %p AND CAPTION='%c'</Q0001>
			<Q0002>SELECT MAX(ID) FROM LWH_BKDIR</Q0002>
			<Q0003>INSERT INTO LWH_BKDIR(ID,PARENTBM,CAPTION,LASTUSER, ROWVERSION) VALUES (%id, %p, '%c', '%u','%ts')</Q0003>
			<Q0004>SELECT ID, CAPTION FROM LWH_BKDIR WHERE ID=%id</Q0004>
			<Q0005>SELECT ID,PARENTBM,CAPTION, LASTUSER, ROWVERSION FROM LWH_BKDIR WHERE PARENTBM = %p ORDER BY ID ASC</Q0005>
			<Q0006>SELECT TOP 100 DT, USERNAME, CODE, TIM, JSON, LASTUSER, ROWVERSION FROM LWH_HISTO WHERE USERNAME='%u' ORDER BY DT DESC, TIM DESC, CODE ASC</Q0006>
			<Q0007>UPDATE LWH_BKDIR SET CAPTION='%c', LASTUSER='%u', ROWVERSION='%ts' WHERE ID=%id</Q0007>
			<Q0008>SELECT TABLE_NAME, COLNAME,EXTERNAL_NAME, SYSCOL, TYPE_COL, COLLEN, PRECIS, MASK, CHARCASE, DEFVAL, CTRL, JSON FROM LWH_COLUMNS</Q0008>
			<Q0009>SELECT CODE, USERNAME, JSON FROM LWH_IHM WHERE USERNAME='admin' OR USERNAME='%u'</Q0009>
			<Q0010>SELECT SY_ID, RTRIM(SY_CODE) AS SY_CODE, RTRIM(SY_LASTNAME) AS SY_LASTNAME, RTRIM(SY_FIRSTNAME) AS SY_FIRSTNAME FROM WORKER WHERE SY_CODE LIKE '%s%' OR SY_LASTNAME LIKE '%s%'  ORDER BY 2,3</Q0010>
			<Q0011>INSERT OR REPLACE INTO LWH_BKDIR(ID,PARENTBM,CAPTION,LASTUSER, ROWVERSION) VALUES (%id, %p, '%c', '%u','%ts');</Q0011>
			
			<QC001>SELECT DISTINCT TABLE_NAME FROM LWH_COLUMNS</QC001>
			<QC002>SELECT CODE, USERNAME, JSON FROM LWH_IHM WHERE USERNAME='admin' OR USERNAME='%u'</QC002>
			<QC003>DELETE FROM LWH_IHM WHERE CODE='%c' AND USERNAME='%u'</QC003>
			<QC004>INSERT INTO LWH_IHM (CODE,USERNAME,JSON) VALUES ('%c','%u','%j')</QC004>
			<QC005>SELECT 1 FROM LWH_IHM WHERE CODE='%c' AND USERNAME='admin'</QC005>
			<QID01>SELECT I.ID, MAX(T.SY_ID) FROM LWH_ID I CROSS JOIN %t T WHERE ENTITY ='%t'</QID01>
			<QCF01>SELECT DISTINCT TABLE_NAME FROM LWH_COLUMNS ORDER BY 1</QCF01>
			<QCF02>SELECT DISTINCT ID,RTRIM(COLNAME) AS COLNAME, RTIM(EXTERNAL_NAME) AS EXTERNAL_NAME, RTRIM(SYSCOL) AS SYSCOL, TYPE_COL, COLLEN, PRECIS, MASK, CHARCASE, DEFVAL, CTRL,JSON, LASTUSER, ROWVERSION FROM LWH_COLUMNS ORDER BY 1</QCF02>
		</QUERIES>

	</SQLSERVER>
	
	
	<FIREBIRD>
			<LWH_BKDIR>
			<TABLE>
RECREATE TABLE LWH_BKDIR(	
	ID INTEGER NOT NULL,
	PARENTBM INTEGER,
	CAPTION VARCHAR(255),
	LASTUSER VARCHAR(50),
	ROWVERSION TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	CONSTRAINT PK_LWH_BKDIR PRIMARY KEY (ID),
	CONSTRAINT FK_BKDIR FOREIGN KEY (PARENTBM) REFERENCES LWH_BKDIR(ID) ON DELETE CASCADE);
			</TABLE>
			<TRIGGERS>
				<TR_BKDIR_DEF_CU>
SET TERM ^ ;
CREATE TRIGGER TR_BKDIR_DEF_U for LWH_BKDIR
BEFORE INSERT OR UPDATE AS
BEGIN
    NEW.ROWVERSION = current_timestamp;
	NEW.LASTUSER = current_user;
END ^
SET TERM ; ^
				</TR_BKDIR_DEF_CU>
			</TRIGGERS>
			<GRANT>
GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE ON LWH_BKDIR TO PUBLIC;
			</GRANT>
			<INIT>
UPDATE OR INSERT INTO LWH_BKDIR (ID, PARENTBM, CAPTION) VALUES (0,null,'/');
			</INIT>
		</LWH_BKDIR>
		<LWH_BOOKMARK>
			<TABLE>
RECREATE TABLE LWH_BOOKMARK(
	ID INTEGER NOT NULL,
	PARENTBM INTEGER,
	CODE VARCHAR(15),
	USERNAME VARCHAR(100),
	JSON VARCHAR(500),	
	CAPTION VARCHAR(255),
	LASTUSER VARCHAR(50),
	ROWVERSION TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	PRIMARY KEY (ID));
			</TABLE>
			<TRIGGERS>
				<TR_BOOKMARK_DEF_CU>
SET TERM ^ ;
CREATE TRIGGER TR_BOOKMARK_DEF_U for LWH_BOOKMARK
BEFORE INSERT OR UPDATE AS
BEGIN
    NEW.ROWVERSION = current_timestamp;
	NEW.LASTUSER = current_user;
END ^
SET TERM ; ^
				</TR_BOOKMARK_DEF_CU>
			</TRIGGERS>
		</LWH_BOOKMARK>
		<LWH_CFG>
			<TABLE>
RECREATE TABLE LWH_CFG(
	CODE VARCHAR(15) NOT NULL,
	USERNAME VARCHAR(100) NOT NULL,
	STRVALUE VARCHAR(255),
	INTVALUE INTEGER,
	LASTUSER VARCHAR(50),
    ROWVERSION TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	PRIMARY KEY (CODE,USERNAME));
			</TABLE>
			<TRIGGERS>
				<TR_CFG_DEF_CU>
SET TERM ^ ;
CREATE TRIGGER TR_BOOKMARK_DEF_CU for LWH_CFG
BEFORE INSERT OR UPDATE AS
BEGIN
    NEW.ROWVERSION = current_timestamp;
	NEW.LASTUSER = current_user;
END ^
SET TERM ; ^
				</TR_CFG_DEF_CU>
			</TRIGGERS>
			<GRANT>
GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE ON LWH_CFG TO PUBLIC;
			</GRANT>
		</LWH_CFG>
		<LWH_COLUMNS>
			<TABLE>
RECREATE TABLE LWH_COLUMNS (
  ID INTEGER NOT NULL,
  TABLE_NAME VARCHAR(50) NOT NULL,
  COLNAME VARCHAR(50) NOT NULL,
  EXTERNAL_NAME VARCHAR(50) NOT NULL,
  SYSCOL CHAR(1) DEFAULT 'N',
  TYPE_COL VARCHAR(50) NOT NULL,
  COLLEN INTEGER DEFAULT 0,
  PRECIS INTEGER DEFAULT 0,
  MASK VARCHAR(255),
  CHARCASE CHAR(1) DEFAULT 'A',
  DEFVAL VARCHAR(255),
  CTRL VARCHAR(255),
  JSON VARCHAR(8000),
  LASTUSER VARCHAR(50),
  ROWVERSION TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT PK_LWH_COLUMNS PRIMARY KEY (ID));
			</TABLE>
			<GRANT>
GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE ON LWH_COLUMNS TO PUBLIC;
			</GRANT>
			<TRIGGERS>
				<TR_COLUMS_DEF_CU>
SET TERM ^ ;
CREATE TRIGGER TR_COLUMNS_DEF_CU for LWH_COLUMNS
BEFORE INSERT OR UPDATE AS
BEGIN
    NEW.ROWVERSION = current_timestamp;
	NEW.LASTUSER = current_user;
END ^
SET TERM ; ^
				</TR_COLUMS_DEF_CU>
			</TRIGGERS>
		</LWH_COLUMNS>
		<LWH_HISTO>
			<TABLE>
RECREATE TABLE LWH_HISTO(
	DT VARCHAR(8) NOT NULL,
	CODE VARCHAR(15) NOT NULL,
	USERNAME VARCHAR(100) DEFAULT 'admin' NOT NULL,
	TIM VARCHAR(8) DEFAULT '00:00:00' NOT NULL,
	JSON VARCHAR(500),
	LASTUSER VARCHAR(50),
	ROWVERSION TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	PRIMARY KEY (DT,CODE,USERNAME));
        	</TABLE>
			<GRANT>
GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE ON LWH_HISTO TO PUBLIC;
			</GRANT>
			<INDEX>
CREATE DESCENDING INDEX UXD_HISTO_DT ON LWH_HISTO (DT);
			</INDEX>
		</LWH_HISTO>
		<LWH_ID>
			<TABLE>
RECREATE TABLE LWH_ID(
	ENTITY VARCHAR(100) PRIMARY KEY, 
	ID INTEGER DEFAULT 0 NOT NULL );
			</TABLE>
			<GRANT>
GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE ON LWH_ID TO PUBLIC;
			</GRANT>
		</LWH_ID>
		<LWH_IHM>
			<TABLE>
RECREATE TABLE LWH_IHM
(
  CODE VARCHAR(100) NOT NULL,
  USERNAME VARCHAR(100) NOT NULL,
  JSON VARCHAR(8000),
  LASTUSER VARCHAR(50),
  ROWVERSION TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT PK_LWH_IHM PRIMARY KEY (CODE,USERNAME));
			</TABLE>
			<GRANT>
GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE ON LWH_IHM TO PUBLIC;
			</GRANT>
			<TRIGGERS>
				<TR_IHM_DEF_CU>
SET TERM ^ ;
CREATE TRIGGER TR_IHM_DEF_CU for LWH_IHM
BEFORE INSERT OR UPDATE AS
BEGIN
    NEW.ROWVERSION = current_timestamp;
	NEW.LASTUSER = current_user;
END ^
SET TERM ; ^
				</TR_IHM_DEF_CU>
			</TRIGGERS>
		</LWH_IHM>
		<WORKER>
			<GRANT>
GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE ON WORKER TO PUBLIC;
			</GRANT>
			<INDEX>
				<IX_WORKER_01>
CREATE UNIQUE ASCENDING INDEX IX_WORKER_01 ON WORKER(SY_ID);
				</IX_WORKER_01>
				<IX_WORKER_02>
CREATE UNIQUE ASCENDING INDEX IX_WORKER_02 ON WORKER(SY_CODE);
				</IX_WORKER_02>
				<IX_WORKER_03>
CREATE  ASCENDING INDEX IX_WORKER_03 ON WORKER(SY_LASTNAME);
				</IX_WORKER_03>
			</INDEX>			
		</WORKER>
		<CASTMEMO>TRIM(%s)</CASTMEMO>
		<COMMENT>--</COMMENT>
		<CONCAT>||</CONCAT>
		<CREATETABLE>RECREATE TABLE %t (%def, CONSTRAINT PK_%t PRIMARY KEY (%p))</CREATETABLE>
		<DROPTABLE>--DROP TABLE %t</DROPTABLE>	
		<GO>COMMIT;</GO>
		<IDENTITY>GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL</IDENTITY>
		<LIMIT>FIRST</LIMIT>
		<LINEEND>;</LINEEND>
		<NULLABLE></NULLABLE>
		<NOTNULLABLE>NOT NULL</NOTNULLABLE>
		<REPLACE>REPLACE INTO %t ( %c ) VALUES(%v)</REPLACE>
		<ROWVERSION>YYYY-MM-DD HH:MM:SS.ZZZ</ROWVERSION>
		<TRIM>TRIM(%s)</TRIM>
		<TYPECHAR>VARCHAR(%l)</TYPECHAR>
		<TYPEDECI>REAL</TYPEDECI>
		<TYPEINT>INTEGER</TYPEINT>
		<TYPENUM>NUMERIC</TYPENUM>		
		<TYPEVARCHAR>VARCHAR(%L+</TYPEVARCHAR>
		
		<INIT>INSERT OR REPLACE INTO LWH_ID(ENTITY,ID) SELECT 'WORKER', MAX(ID) FROM WORKER</INIT>
		<QUERIES>
			<IN001>UPDATE OR INSERT INTO LWH_HISTO( DT, USERNAME, CODE, TIM, JSON, LASTUSER, ROWVERSION) VALUES ( :DT, :USERNAME, :CODE, :TIM, :JSON, :LASTUSER, :ROWVERSION)</IN001>
			<Q0001>SELECT ID FROM LWH_BKDIR WHERE PARENTBM = %p AND CAPTION='%c'</Q0001>
			<Q0002>SELECT MAX(ID) FROM LWH_BKDIR</Q0002>
			<Q0003>INSERT INTO LWH_BKDIR(ID,PARENTBM,CAPTION,LASTUSER, ROWVERSION) VALUES (%id, %p, '%c', '%u','%ts')</Q0003>
			<Q0004>SELECT ID, CAPTION FROM LWH_BKDIR WHERE ID=%id</Q0004>
			<Q0005>SELECT ID,PARENTBM,CAPTION, LASTUSER, ROWVERSION FROM LWH_BKDIR WHERE PARENTBM = %p ORDER BY ID ASC</Q0005>
			<Q0006>SELECT FIRST 100 DT, USERNAME, CODE, TIM, JSON, LASTUSER, ROWVERSION FROM LWH_HISTO WHERE USERNAME='%u' ORDER BY DT DESC, TIM DESC, CODE ASC</Q0006>
			<Q0007>UPDATE LWH_BKDIR SET CAPTION='%c', LASTUSER='%u', ROWVERSION='%ts' WHERE ID=%id</Q0007>
			<Q0008>SELECT TABLE_NAME, COLNAME,EXTERNAL_NAME, SYSCOL, TYPE_COL, COLLEN, PRECIS, MASK, CHARCASE, DEFVAL, CTRL, JSON FROM LWH_COLUMNS</Q0008>
			<Q0009>SELECT CODE, USERNAME, JSON FROM LWH_IHM WHERE USERNAME='admin' OR USERNAME='%u'</Q0009>
			<Q0010>SELECT SY_ID, TRIM(SY_CODE) AS SY_CODE, TRIM(SY_LASTNAME) AS SY_LASTNAME, TRIM(SY_FIRSTNAME) AS SY_FIRSTNAME FROM WORKER WHERE SY_CODE LIKE '%s%' OR SY_LASTNAME LIKE '%s%'  ORDER BY 2,3</Q0010>
			
			<QC001>SELECT DISTINCT TABLE_NAME FROM LWH_COLUMNS</QC001>
			<QC002>SELECT CODE, USERNAME, JSON FROM LWH_IHM WHERE USERNAME='admin' OR USERNAME='%u'</QC002>
			<QC003>DELETE FROM LWH_IHM WHERE CODE='%c' AND USERNAME='%u'</QC003>
			<QC004>INSERT INTO LWH_IHM (CODE,USERNAME,JSON) VALUES ('%c','%u','%j')</QC004>
			<QC005>SELECT 1 FROM LWH_IHM WHERE CODE='%c' AND USERNAME='admin'</QC005>
			<QID01>SELECT I.ID, MAX(T.SY_ID) FROM LWH_ID I CROSS JOIN %t T WHERE ENTITY ='%t'</QID01>
			<QCF01>SELECT DISTINCT TABLE_NAME FROM LWH_COLUMNS ORDER BY 1</QCF01>
			<QCF02>SELECT DISTINCT ID,TRIM(COLNAME) AS COLNAME, trim(EXTERNAL_NAME) AS EXTERNAL_NAME, trim(SYSCOL) AS SYSCOL, TYPE_COL, COLLEN, PRECIS, MASK, CHARCASE, DEFVAL, CTRL,JSON, LASTUSER, ROWVERSION FROM LWH_COLUMNS ORDER BY 1</QCF02>
		</QUERIES>
		
	</FIREBIRD>
	
</SYNTAX>
